@using System.Reflection
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader AssemblyLoader

<Router AppAssembly="typeof(Layout.MainLayout).Assembly" 
AdditionalAssemblies="lazyLoadedAssemblies" 
OnNavigateAsync="OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
        <FocusOnNavigate RouteData="routeData" Selector="h1" />
    </Found>
</Router>

@code {

    private DotNetObjectReference<GlobalResizeHelper>? GlobalResize;

    private List<Assembly> lazyLoadedAssemblies = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            GlobalResize = DotNetObjectReference.Create(new GlobalResizeHelper(InvokeResize));
            if (GlobalResize is not null)
            {
                await R.JSRuntime.InvokeVoidAsync("CommonJSFunctions.InitiateResize", GlobalResize);
            }
            R.Lang.SetLanguage("en");
        }
        catch (Exception ex)
        {
            R.ComFn.JSConsole("Exception", ex);
        }
    }

    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
            var assemblylist = GetLazyAssembly(args.Path);
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(assemblylist);
            lazyLoadedAssemblies.AddRange(assemblies);
        }
        catch (Exception ex)
        {
            Console.WriteLine("OnNavigateAsync Expection =>" + ex.Message);
        }
    }

    public void InvokeResize(int width, int height)
    {
        Console.WriteLine($"width => {width} | height => {height}");
    }

    private string[] GetLazyAssembly(string path)
    {
        if (path.StartsWith("customer"))
        {
            return ["CustomerApp.wasm"];
        }
        else if (path.StartsWith("owner"))
        {
            return ["ShopOwnerApp.wasm"];
        }
        return [];
    }
}